services:
  bot:
    container_name: if-bot
    build:
      ./Bot
    volumes:
      - ./Bot:/app
      - pip-cache:/root/.cache/pip
    networks:
      - app-network
    depends_on:
      Redis:
        condition: service_healthy
      #api:
        #condition: service_started
    env_file:
      - .env

  
  #api:
    #container_name: if-api
    #build:
      #./Api
    #ports:
      #- 5050:80
      #- 4040:80
    #volumes:
      #- ./Api:/app
      #- pip-cache:/root/.cache/pip
    #networks:
      #- app-network
    #depends_on:
      #Redis:
        #condition: service_healthy
    #env_file:
      #- .env
  

  Redis:
    image: redis:latest
    expose:
      - ${REDIS_PORT}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}", "--bind", "0.0.0.0"]
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "Redis", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - app-network
    volumes:
      - redis-data:/data
  
  lavalink:
    image: ghcr.io/lavalink-devs/lavalink:4
    container_name: lavalink
    restart: unless-stopped
    environment:
      - _JAVA_OPTIONS=-Xmx6G
      - SERVER_PORT=2333
    networks:
      - app-network
    expose:
      - 2333
    volumes:
      # mount application.yml from the same directory or use environment variables
      - ./application.yml:/opt/Lavalink/application.yml
      # persist plugins between restarts, make sure to set the correct permissions (user: 322, group: 322)
      - ./plugins/:/opt/Lavalink/plugins/



networks:
  app-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
  pip-cache:
    driver: local